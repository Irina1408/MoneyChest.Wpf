<local:MoneyTransferEventDetailsViewBase x:Class="MoneyChest.View.Details.MoneyTransferEventDetailsView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MoneyChest.View.Details"
             xmlns:moneyChestView="clr-namespace:MoneyChest.View"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
	         xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:viewModel="clr-namespace:MoneyChest.ViewModel.ViewModel;assembly=MoneyChest.ViewModel"
             xmlns:converters="clr-namespace:MoneyChest.View.Converters"
             xmlns:enums="clr-namespace:MoneyChest.Model.Enums;assembly=MoneyChest.Model"
                                         xmlns:components="clr-namespace:MoneyChest.View.Components"
                                         mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.Resources>
        <converters:EnumToBoolConverter x:Key="EBConverter"/>
        <converters:EnumToVisibilityConverter x:Key="EVConverter"/>
        <converters:BoolToVisibilityConverter x:Key="BVConverter"/>
    </UserControl.Resources>
    
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>

        <Label x:Name="LabelHeader" Grid.Row="0" Grid.ColumnSpan="2"
               FontSize="{DynamicResource LargeFontSize}" HorizontalAlignment="Center"/>

        <!-- Main part -->
        <Grid Grid.Column="0" Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <!-- Storages and value -->
            <Grid Grid.Row="0" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Storage from -->
                <ComboBox x:Name="comboFromStorage" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Left" Margin="5 5 10 5"
                          SelectedValue="{Binding StorageFromId}" DisplayMemberPath="NameValue" SelectedValuePath="Id"
                          materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding MoneyTransfer_StorageFrom}"
                          SelectionChanged="comboStorage_SelectionChanged" Width="220">
                    <ComboBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsVisible}" Value="false">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.ItemContainerStyle>
                </ComboBox>

                <!-- Arrow -->
                <iconPacks:PackIconOcticons Kind="ArrowRight" Grid.Column="1" Grid.Row="0" Height="30" Width="36"/>

                <!-- Storage to -->
                <ComboBox x:Name="comboToStorage"  Grid.Column="2" Grid.Row="0" HorizontalAlignment="Right" Margin="10 5 5 5"
                          SelectedValue="{Binding StorageToId}" DisplayMemberPath="NameValue" SelectedValuePath="Id"
                          materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding MoneyTransfer_StorageTo}"
                          SelectionChanged="comboStorage_SelectionChanged" Width="220">
                    <ComboBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource MaterialDesignComboBoxItemSelectedCollapsedStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsVisible}" Value="false">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ComboBox.ItemContainerStyle>
                </ComboBox>

                <!-- Value that should be taken from Storage from -->
                <TextBox Grid.Column="0" Grid.Row="1" HorizontalAlignment="Left" Margin="5 5 10 5" Width="220"
                         materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_Amount}"
                         Text="{Binding StorageFromValue, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True, StringFormat={}{0:0.##}}"/>

                <!-- Arrow -->
                <iconPacks:PackIconOcticons Kind="ArrowRight" Grid.Column="1" Grid.Row="1" Height="30" Width="36"/>

                <!-- Value that should be taken from Storage to -->
                <TextBox Grid.Column="2" Grid.Row="1" HorizontalAlignment="Right" Margin="10 5 5 5" Width="220"
                         materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_Amount}"
                         Text="{Binding StorageToValue, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True, StringFormat={}{0:0.##}}"/>
            </Grid>

            <!-- Definition part (Description, Category, Remark) -->
            <StackPanel Grid.Column="0" Grid.Row="1" Grid.RowSpan="2" Margin="5 20 0 0" VerticalAlignment="Top">
                
                <!-- Description -->
                <StackPanel Orientation="Horizontal">
                    <iconPacks:PackIconMaterial Kind="Label" Style="{DynamicResource TextBoxIconStyle}"/>
                    <TextBox materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_Description}" 
                                     Text="{Binding Description, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True}"/>
                </StackPanel>

                <!-- Category -->
                <components:CategorySelector HorizontalAlignment="Left" VerticalAlignment="Center"
                                         SelectedCategoryId="{Binding CategoryId}" ShowEmptyCategory="True"/>

                <!-- Remark -->
                <StackPanel Orientation="Horizontal">
                    <iconPacks:PackIconModern Kind="TagLabel" Style="{DynamicResource TextBoxMultilineIconStyle}"/>
                    <TextBox Style="{DynamicResource HintMultilineTextBoxStyle}"
                                     materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_Remark}" 
                                     Text="{Binding Remark, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
                
                <StackPanel VerticalAlignment="Center" Margin="0 10 0 0">
                    <!-- Auto Execution -->
                    <CheckBox Content="{moneyChestView:MultiLangBinding Event_AutoExecution}" IsChecked="{Binding AutoExecution}"
                              VerticalAlignment="Center"/>

                    <!-- Confirm Before Execute -->
                    <CheckBox Content="{moneyChestView:MultiLangBinding Event_ConfirmBeforeExecute}" 
                      ToolTip="{moneyChestView:MultiLangBinding Event_ConfirmBeforeExecuteDetailed}" 
                      IsChecked="{Binding ConfirmBeforeExecute}" IsEnabled="{Binding AutoExecution}" VerticalAlignment="Center"/>
                </StackPanel>
            </StackPanel>

            <!-- Currency exchange rate -->
            <GroupBox Grid.Column="1" Grid.Row="1" Margin="5 20 5 0" IsEnabled="{Binding IsDifferentCurrenciesSelected}">
                <GroupBox.Header>
                    <TextBlock Text="{moneyChestView:MultiLangBinding MoneyTransfer_ExchangeRate}"
                              Foreground="{DynamicResource IdealForegroundColorBrush}" Margin="5 0 0 0"/>
                </GroupBox.Header>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="*"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <!-- Example -->
                    <TextBlock Grid.Row="0" Text="{Binding ExchangeRateExample}" FontSize="{DynamicResource LargeFontSize}"
                               Foreground="{DynamicResource BlackBrush}" VerticalAlignment="Center" HorizontalAlignment="Center">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsDifferentCurrenciesSelected}" Value="false">
                                        <Setter Property="Opacity" Value="0.5"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>

                    <!-- Rate -->
                    <TextBox Grid.Row="1" materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding CurrencyExchangeRate_Rate}"
                                     Text="{Binding CurrencyExchangeRate, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True, StringFormat={}{0:0.####}}" Margin="5 10 5 10" Width="Auto"/>
                </Grid>
            </GroupBox>

            <!-- Comission -->
            <components:CommissionControl Grid.Column="1" Grid.Row="2" Margin="5 10 5 5" ShowTakeCommissionFromReceiver="True"
                                          CurrencySymbol="{Binding StorageFromCurrency.Symbol}"/>
        </Grid>

        <!-- Part "Schedule" -->
        <GroupBox Grid.Row="1" Grid.Column="1">
            <GroupBox.Header>
                <TextBlock Foreground="{DynamicResource IdealForegroundColorBrush}" Margin="5 0 0 0"
                           Text="{moneyChestView:MultiLangBinding Event_Schedule}">
                </TextBlock>
            </GroupBox.Header>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <!-- Schedule type -->
                <StackPanel Orientation="Horizontal">
                    <iconPacks:PackIconMaterial Kind="Timelapse" Style="{DynamicResource TextBoxIconStyle}"/>
                    <ComboBox x:Name="comboScheduleTypes" HorizontalAlignment="Left"
                          materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding ScheduleType_EnumName}"
                          DisplayMemberPath="Description" SelectedValuePath="Value"
                          SelectedValue="{Binding Schedule.ScheduleType}" Background="{DynamicResource WhiteBrush}"/>
                </StackPanel>

                <!-- Date for Once schedule type -->
                <DatePicker SelectedDate="{Binding DateFrom}" Grid.Row="1" 
                            materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_Date}" 
                            Visibility="{Binding Schedule.ScheduleType, Converter={StaticResource EVConverter}, ConverterParameter={x:Static enums:ScheduleType.Once}}"/>

                <!-- Period for daily, weekly or monthly schedule type -->
                <StackPanel Grid.Row="1" Visibility="{Binding Schedule.IsDateRange, Converter={StaticResource BVConverter}}" Margin="0 5 0 0">
                    <!-- Date from -->
                    <DatePicker SelectedDate="{Binding DateFrom}"
                            materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_DateFrom}"/>

                    <!-- Date until -->
                    <DatePicker SelectedDate="{Binding DateUntil}"
                            materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding General_DateUntil}"/>
                </StackPanel>

                <!-- Settings for daily schedule type -->
                <Grid Grid.Row="2" Visibility="{Binding Schedule.ScheduleType, Converter={StaticResource EVConverter}, 
                    ConverterParameter={x:Static enums:ScheduleType.Daily}}">
                    <!-- Period -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" VerticalAlignment="Top">
                        <iconPacks:PackIconModern Kind="TimerForward" Style="{DynamicResource TextBoxIconStyle}"/>
                        <TextBox materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding Schedule_RepetitionPeriod_Daily}"
                                     Text="{Binding Schedule.Period, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True, StringFormat={}{0:0}}"/>
                    </StackPanel>
                </Grid>

                <!-- Settings for weekly schedule type -->
                <Grid Grid.Row="2" Visibility="{Binding Schedule.ScheduleType, Converter={StaticResource EVConverter}, 
                    ConverterParameter={x:Static enums:ScheduleType.Weekly}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Period -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Grid.Row="0" VerticalAlignment="Top">
                        <iconPacks:PackIconModern Kind="TimerForward" Style="{DynamicResource TextBoxIconStyle}"/>
                        <TextBox materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding Schedule_RepetitionPeriod_Weekly}"
                                     Text="{Binding Schedule.Period, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True, ValidatesOnNotifyDataErrors=True, ValidatesOnExceptions=True, StringFormat={}{0:0}}"/>
                    </StackPanel>

                    <!-- Days of week -->
                    <ItemsControl x:Name="DaysOfWeekControl" Grid.IsSharedSizeScope="True" Grid.Row="1" Margin="15 5 0 5">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewModel:SelectableViewModel}">
                                <Border x:Name="Border">
                                    <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsSelected}" Content="{Binding Description}"
                                              Checked="DayOfWeek_CheckChanged" Unchecked="DayOfWeek_CheckChanged"/>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>

                <!-- Settings for monthly schedule type -->
                <Grid Grid.Row="2" Visibility="{Binding Schedule.ScheduleType, Converter={StaticResource EVConverter}, 
                    ConverterParameter={x:Static enums:ScheduleType.Monthly}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Day of month -->
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Grid.Row="0" VerticalAlignment="Top">
                        <iconPacks:PackIconMaterial Kind="CalendarToday" Style="{DynamicResource TextBoxIconStyle}"/>
                        <ComboBox x:Name="comboDaysOfMonth" Background="{DynamicResource WhiteBrush}"
                                  materialDesign:HintAssist.Hint="{moneyChestView:MultiLangBinding Schedule_DayOfMonth}"
                                  DisplayMemberPath="Description" SelectedValuePath="Value" SelectedValue="{Binding Schedule.DayOfMonth}"/>
                    </StackPanel>

                    <!-- Monthes -->
                    <ItemsControl x:Name="MonthesControl" Grid.IsSharedSizeScope="True" Grid.Row="1" Margin="15 5 0 5">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type viewModel:SelectableViewModel}">
                                <Border x:Name="Border">
                                    <CheckBox VerticalAlignment="Center" IsChecked="{Binding IsSelected}" Content="{Binding Description}"
                                              Checked="Month_CheckChanged" Unchecked="Month_CheckChanged"/>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </Grid>
            </Grid>
        </GroupBox>

        <!-- Ok/Cancel buttons -->
        <components:DetailsViewCommandsPanel x:Name="CommandsPanel"  Grid.Row="2" Grid.ColumnSpan="2"/>
    </Grid>
</local:MoneyTransferEventDetailsViewBase>
